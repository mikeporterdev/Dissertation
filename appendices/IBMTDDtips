Additionally we have gained experiences with
transitioning to TDD we wish to share with other teams.
We list these in order of importance.
x Start the TDD from the beginning of project. Set the
expectation that team members that fervently apply
the unit test paradigm may initially appear less
productive or frustrated at the time it takes to create
the unit tests. Assure them that the practice will have
ultimately minimal impact to their productivity.
x For a team new to TDD, introduce automated build
test integration towards the second third of the
development phaseâ€”not too early but not too late. If
this is a brand new project, adding the automated
build test towards the second third of the development
schedule allows the team adjusts to and become
familiar with TDD. Prior to the automated build test
integration, each developer should run all the test
cases on their own machine.
x Convince the development team to add new tests
every time a problem is found, no matter when the
problem is found. Thus, at least one new test should
confirm the presence of and removal of each valid,
opened defect. By doing so, the unit test suites
improve during the development and test phases. This
part of the process needs to be communicated early
and enforced by reminders and monitoring of unit test
count.
x Get the test team involved and knowledgeable about
the TDD approach. The test team should not accept
new development release if the unit tests are failing.
x Hold a thorough review of an initial unit test plan,
setting an ambitious goal of having the greatest
number of automated tests, since automated tests can
be easily integrated and run automatically without
necessitating human intervention. We used 80%
automated tests as a minimum goal. We cannot
overemphasize the importance of constantly running
in a daily automatic build; tests run should become the
heartbeat of the system as well as a means to track
progress of the development. This also gives a level
of confidence to the team when new features are
added. If new classes and tests are added and the next
build test is successful, the team can have a higher
confidence in the change.
x Encourage fast unit test execution and efficient unit
test design. Test execution speed is very important
since when all tests are integrated the complete
execution can become quite long for a decent project
and constant test execution. Results are important
early and often, to provide feedback on the current
state of the system. Further, the faster the execution
of the tests the more likely developers themselves will
run the tests without waiting for the automated build
tests results.
x Take all opportunities to encourage development team
to add unit tests to their code. This can be done by
monitoring which subsystems have more unit tests
relative to how big that subsystem is and
acknowledging the developer of the subsystem